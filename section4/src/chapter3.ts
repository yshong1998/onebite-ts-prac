/**
 * 함수 오버로딩 -> JS에는 없고 TS에서만 가능
 * 하나의 함수를 매개변수의 개수나 타입에 따라 여러가지 버전으로 만드는 문법
 * 하나의 함수 func
 * 모든 매개변수의 타입 number
 * Ver1. 매개변수가 1개 -> 이 매개변수에 20을 곱한 값 출력
 * Ver2. 매개변수가 3개 -> 이 매개변수들을 다 더한 값을 출력
 */

// 버전들 - 오버로드 시그니처 : 구현부 없이 시그니처만 선언한 것.
function func(a: number) : void;
function func(a: number, b: number, c: number): void;

// 실제 구현부 - 이걸 만들면 이제 위에 발생하던 오류가 없어진다.
// 이 부분을 구현 시그니처라고 부른다.
// function func (){}
// 위와 같이 함수의 매개변수와 본문에 아무 것도 넣지 않은 상태에서 아래와 같이 호출해 보면
// func();
// func(1);
// func(1,2);
// func(1,2,3);
// 신기하게 1번째만 맞아야 할 것 같은데 2번째와 4번째가 맞다고 나온다.
// 오버로드 시그니처에 매개변수가 1개인 시그니처와 3개인 시그니처만 정의되어 있기 때문이다.
function func(a: number, b?:number, c?:number){
    if(typeof b ==='number' && typeof c === 'number'){
        console.log(a+b+c);
    } else {
        console.log(a * 20);
    }  
}

// 핵심 요약 : TS에서만 지원하는 기능으로 함수 오버로딩이 있다.
// 자바와 다르게 버전을 구현부 없이 원하는 방식으로 선언해 놓고,
// 그들의 버전을 조건문으로 나눠서 실 구현부가 있는 함수는 한 개만 만들 수 있다.